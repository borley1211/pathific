#compdef pathific_main

_pathific() {
  local context curcontext="$curcontext" state line cmds
  cmds=("$(pathific_main -h | sed -n '/^Commands:/,/^$/p' | sed -e '1d;$d' | cut -b3- | sed -e 's/  */\:/')")
  _arguments -C \
    '1: :->cmds' \
    {-h,--help}'[Show help message.]: :' \
    {-H,--help-all}'[Show manpage.]: :' \
    {-c,--config}'[Specify the configuration to load]:specify configuration file:_files' \
    '*::arg:->args' \
    && ret=0

  case $state in
    cmds)
      _describe -t cmds "$PATHIFIC_COMMAND <commands> [<args>]" cmds \
      && ret=0
    ;;
    args)
      local subcmd=$line[1]
      case $subcmd in
        "clone"|"unlink")
          _path_files && ret=0
    ;;
    "pull")
      _values "$PATHIFIC_COMMAND pull [--self]" \
        "--self[Update $PATHIFIC_COMMAND framework from repository.]" \
        "[Update the pathificfiles directory by `git pull`.]" \
        && ret=0
    ;;
    "add")
      _arguments \
        "*: :_path_files -X $PATHIFIC_COMMAND add <file> [</path/to/the/file>]
        Select the file to move to PATHIFIC_DIR (or an arbitrary path).
        (And this command makes its symbolic link.)" \
        && ret=0
    ;;
    "set"|"update")
      _values "$PATHIFIC_COMMAND (set | update) [options]"\
        {-i,--ignore}'[No interaction mode(skip all conflicts).]' \
        {-f,--force}'[Ignore conflicts and force make symbolic links.]' \
        {-b,--backup}'[Ignore conflicts, make symbolic links and create its original backup.]' \
        {-v,--verbose}'[Print verbose messages.]' \
        && ret=0
    ;;
    esac
  ;;
  esac

  return "${ret}"
}
